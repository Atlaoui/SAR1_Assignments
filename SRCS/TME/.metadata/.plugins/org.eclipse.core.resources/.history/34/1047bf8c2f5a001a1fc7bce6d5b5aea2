package TME4;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.net.ServerSocket;
import java.net.Socket;

import TME4.Interfaces.Service;
import TME4.annotation.EtatGlobal;
import TME4.annotation.SansEtat;

public class ServeurMultiThread {

	private final int port;
	private ServerSocket ecoute;
	private final Class< ? extends Service> c;
	private boolean NOTEND = true;
	private Service avecEtat;

	public ServeurMultiThread(int port , Class< ? extends Service> c) {
		this.port=port;
		this.c=c;
		
		try {
			ecoute = new ServerSocket(port);
			for(Annotation a : c.getAnnotations()) 
				if(a instanceof SansEtat) 
					avecEtat = c.getConstructor().newInstance();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}



	public void listen() {

		try {

			while(NOTEND) {		
				//pas sur du final dans le while
				Socket socket=ecoute.accept();
				
				Service s = getService(); 
				Runnable runnable2 = () -> {
					System.out.println(1);
					s.execute(socket);
					try {socket.close();} catch (IOException e) {e.printStackTrace();}  
				};
				Thread t = new Thread(runnable2);
				t.start();
			}
		}catch (SecurityException | NoSuchMethodException | InvocationTargetException  |InstantiationException 
				|IllegalArgumentException | IllegalAccessException |IOException e) {
			e.printStackTrace();
		}finally {
			try {
				if(ecoute!=null)
					ecoute.close();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private Service getService() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {	
		for(Annotation a : c.getAnnotations()) {
			if(a instanceof SansEtat) {
				System.out.println("True");
				return c.getConstructor().newInstance();
			}
			if(a instanceof EtatGlobal) {
				System.out.println("True");
				return avecEtat;
			}
				
		}
				
		throw new IllegalStateException("Aie");
	}
}
