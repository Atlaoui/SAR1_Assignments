// Generated from ILPMLgrammar4exam1819.g4 by ANTLR 4.4

    package antlr4;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ILPMLgrammar4exam1819Lexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__45=1, T__44=2, T__43=3, T__42=4, T__41=5, T__40=6, T__39=7, T__38=8, 
		T__37=9, T__36=10, T__35=11, T__34=12, T__33=13, T__32=14, T__31=15, T__30=16, 
		T__29=17, T__28=18, T__27=19, T__26=20, T__25=21, T__24=22, T__23=23, 
		T__22=24, T__21=25, T__20=26, T__19=27, T__18=28, T__17=29, T__16=30, 
		T__15=31, T__14=32, T__13=33, T__12=34, T__11=35, T__10=36, T__9=37, T__8=38, 
		T__7=39, T__6=40, T__5=41, T__4=42, T__3=43, T__2=44, T__1=45, T__0=46, 
		IDENT=47, INT=48, FLOAT=49, STRING=50, ESC=51, LINE_COMMENT=52, COMMENT=53, 
		SPACE=54;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'"
	};
	public static final String[] ruleNames = {
		"T__45", "T__44", "T__43", "T__42", "T__41", "T__40", "T__39", "T__38", 
		"T__37", "T__36", "T__35", "T__34", "T__33", "T__32", "T__31", "T__30", 
		"T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", "T__22", 
		"T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", 
		"T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
		"T__4", "T__3", "T__2", "T__1", "T__0", "IDENT", "INT", "FLOAT", "STRING", 
		"ESC", "LINE_COMMENT", "COMMENT", "SPACE"
	};


	public ILPMLgrammar4exam1819Lexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "ILPMLgrammar4exam1819.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\28\u0169\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3"+
		"\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3"+
		"\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17"+
		"\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3\24"+
		"\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27"+
		"\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33"+
		"\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35"+
		"\3\35\3\36\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3"+
		"$\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3"+
		")\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3-\3-\3-\3-\3-\3.\3.\3/\3"+
		"/\3\60\3\60\7\60\u0124\n\60\f\60\16\60\u0127\13\60\3\61\6\61\u012a\n\61"+
		"\r\61\16\61\u012b\3\62\7\62\u012f\n\62\f\62\16\62\u0132\13\62\3\62\3\62"+
		"\7\62\u0136\n\62\f\62\16\62\u0139\13\62\3\63\3\63\3\63\7\63\u013e\n\63"+
		"\f\63\16\63\u0141\13\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\65\7"+
		"\65\u014c\n\65\f\65\16\65\u014f\13\65\3\65\3\65\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\7\66\u0159\n\66\f\66\16\66\u015c\13\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\67\6\67\u0164\n\67\r\67\16\67\u0165\3\67\3\67\2\28\3\3\5\4\7\5\t"+
		"\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23"+
		"%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G"+
		"%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8\3\2\13\5\2C\\"+
		"aac|\6\2\62;C\\aac|\3\2\62;\4\2$$^^\7\2$$^^ppttvv\4\2\f\f\17\17\3\2\61"+
		"\61\3\2,,\5\2\13\f\17\17\"\"\u0172\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2"+
		"\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3"+
		"\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2"+
		"\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2"+
		"\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2"+
		"\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2"+
		"\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2"+
		"O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3"+
		"\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2"+
		"\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5q\3\2\2\2\7w\3\2\2\2\t"+
		"\177\3\2\2\2\13\u0084\3\2\2\2\r\u0088\3\2\2\2\17\u008b\3\2\2\2\21\u0091"+
		"\3\2\2\2\23\u0097\3\2\2\2\25\u0099\3\2\2\2\27\u009b\3\2\2\2\31\u009d\3"+
		"\2\2\2\33\u009f\3\2\2\2\35\u00a7\3\2\2\2\37\u00aa\3\2\2\2!\u00ac\3\2\2"+
		"\2#\u00b0\3\2\2\2%\u00b3\3\2\2\2\'\u00b5\3\2\2\2)\u00b8\3\2\2\2+\u00c2"+
		"\3\2\2\2-\u00c4\3\2\2\2/\u00c6\3\2\2\2\61\u00c8\3\2\2\2\63\u00ce\3\2\2"+
		"\2\65\u00d0\3\2\2\2\67\u00d7\3\2\2\29\u00de\3\2\2\2;\u00e2\3\2\2\2=\u00e5"+
		"\3\2\2\2?\u00e7\3\2\2\2A\u00ea\3\2\2\2C\u00ec\3\2\2\2E\u00ee\3\2\2\2G"+
		"\u00f0\3\2\2\2I\u00f4\3\2\2\2K\u00f6\3\2\2\2M\u00fb\3\2\2\2O\u00fe\3\2"+
		"\2\2Q\u0107\3\2\2\2S\u010d\3\2\2\2U\u0112\3\2\2\2W\u0114\3\2\2\2Y\u0118"+
		"\3\2\2\2[\u011d\3\2\2\2]\u011f\3\2\2\2_\u0121\3\2\2\2a\u0129\3\2\2\2c"+
		"\u0130\3\2\2\2e\u013a\3\2\2\2g\u0144\3\2\2\2i\u0147\3\2\2\2k\u0152\3\2"+
		"\2\2m\u0163\3\2\2\2op\7\61\2\2p\4\3\2\2\2qr\7e\2\2rs\7c\2\2st\7v\2\2t"+
		"u\7e\2\2uv\7j\2\2v\6\3\2\2\2wx\7h\2\2xy\7k\2\2yz\7p\2\2z{\7c\2\2{|\7n"+
		"\2\2|}\7n\2\2}~\7{\2\2~\b\3\2\2\2\177\u0080\7v\2\2\u0080\u0081\7t\2\2"+
		"\u0081\u0082\7w\2\2\u0082\u0083\7g\2\2\u0083\n\3\2\2\2\u0084\u0085\7p"+
		"\2\2\u0085\u0086\7g\2\2\u0086\u0087\7y\2\2\u0087\f\3\2\2\2\u0088\u0089"+
		"\7#\2\2\u0089\u008a\7?\2\2\u008a\16\3\2\2\2\u008b\u008c\7e\2\2\u008c\u008d"+
		"\7n\2\2\u008d\u008e\7c\2\2\u008e\u008f\7u\2\2\u008f\u0090\7u\2\2\u0090"+
		"\20\3\2\2\2\u0091\u0092\7y\2\2\u0092\u0093\7j\2\2\u0093\u0094\7k\2\2\u0094"+
		"\u0095\7n\2\2\u0095\u0096\7g\2\2\u0096\22\3\2\2\2\u0097\u0098\7}\2\2\u0098"+
		"\24\3\2\2\2\u0099\u009a\7=\2\2\u009a\26\3\2\2\2\u009b\u009c\7?\2\2\u009c"+
		"\30\3\2\2\2\u009d\u009e\7\177\2\2\u009e\32\3\2\2\2\u009f\u00a0\7g\2\2"+
		"\u00a0\u00a1\7z\2\2\u00a1\u00a2\7v\2\2\u00a2\u00a3\7g\2\2\u00a3\u00a4"+
		"\7p\2\2\u00a4\u00a5\7f\2\2\u00a5\u00a6\7u\2\2\u00a6\34\3\2\2\2\u00a7\u00a8"+
		"\7k\2\2\u00a8\u00a9\7h\2\2\u00a9\36\3\2\2\2\u00aa\u00ab\7`\2\2\u00ab "+
		"\3\2\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae\7t\2\2\u00ae\u00af\7{\2\2\u00af"+
		"\"\3\2\2\2\u00b0\u00b1\7>\2\2\u00b1\u00b2\7?\2\2\u00b2$\3\2\2\2\u00b3"+
		"\u00b4\7(\2\2\u00b4&\3\2\2\2\u00b5\u00b6\7f\2\2\u00b6\u00b7\7q\2\2\u00b7"+
		"(\3\2\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba\7w\2\2\u00ba\u00bb\7v\2\2\u00bb"+
		"\u00bc\7q\2\2\u00bc\u00bd\7e\2\2\u00bd\u00be\7n\2\2\u00be\u00bf\7q\2\2"+
		"\u00bf\u00c0\7u\2\2\u00c0\u00c1\7g\2\2\u00c1*\3\2\2\2\u00c2\u00c3\7*\2"+
		"\2\u00c3,\3\2\2\2\u00c4\u00c5\7,\2\2\u00c5.\3\2\2\2\u00c6\u00c7\7.\2\2"+
		"\u00c7\60\3\2\2\2\u00c8\u00c9\7h\2\2\u00c9\u00ca\7c\2\2\u00ca\u00cb\7"+
		"n\2\2\u00cb\u00cc\7u\2\2\u00cc\u00cd\7g\2\2\u00cd\62\3\2\2\2\u00ce\u00cf"+
		"\7\60\2\2\u00cf\64\3\2\2\2\u00d0\u00d1\7o\2\2\u00d1\u00d2\7g\2\2\u00d2"+
		"\u00d3\7v\2\2\u00d3\u00d4\7j\2\2\u00d4\u00d5\7q\2\2\u00d5\u00d6\7f\2\2"+
		"\u00d6\66\3\2\2\2\u00d7\u00d8\7n\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7"+
		"o\2\2\u00da\u00db\7d\2\2\u00db\u00dc\7f\2\2\u00dc\u00dd\7c\2\2\u00dd8"+
		"\3\2\2\2\u00de\u00df\7x\2\2\u00df\u00e0\7c\2\2\u00e0\u00e1\7t\2\2\u00e1"+
		":\3\2\2\2\u00e2\u00e3\7@\2\2\u00e3\u00e4\7?\2\2\u00e4<\3\2\2\2\u00e5\u00e6"+
		"\7~\2\2\u00e6>\3\2\2\2\u00e7\u00e8\7?\2\2\u00e8\u00e9\7?\2\2\u00e9@\3"+
		"\2\2\2\u00ea\u00eb\7>\2\2\u00ebB\3\2\2\2\u00ec\u00ed\7@\2\2\u00edD\3\2"+
		"\2\2\u00ee\u00ef\7#\2\2\u00efF\3\2\2\2\u00f0\u00f1\7n\2\2\u00f1\u00f2"+
		"\7g\2\2\u00f2\u00f3\7v\2\2\u00f3H\3\2\2\2\u00f4\u00f5\7\'\2\2\u00f5J\3"+
		"\2\2\2\u00f6\u00f7\7g\2\2\u00f7\u00f8\7n\2\2\u00f8\u00f9\7u\2\2\u00f9"+
		"\u00fa\7g\2\2\u00faL\3\2\2\2\u00fb\u00fc\7k\2\2\u00fc\u00fd\7p\2\2\u00fd"+
		"N\3\2\2\2\u00fe\u00ff\7h\2\2\u00ff\u0100\7w\2\2\u0100\u0101\7p\2\2\u0101"+
		"\u0102\7e\2\2\u0102\u0103\7v\2\2\u0103\u0104\7k\2\2\u0104\u0105\7q\2\2"+
		"\u0105\u0106\7p\2\2\u0106P\3\2\2\2\u0107\u0108\7u\2\2\u0108\u0109\7w\2"+
		"\2\u0109\u010a\7r\2\2\u010a\u010b\7g\2\2\u010b\u010c\7t\2\2\u010cR\3\2"+
		"\2\2\u010d\u010e\7u\2\2\u010e\u010f\7g\2\2\u010f\u0110\7n\2\2\u0110\u0111"+
		"\7h\2\2\u0111T\3\2\2\2\u0112\u0113\7+\2\2\u0113V\3\2\2\2\u0114\u0115\7"+
		"c\2\2\u0115\u0116\7p\2\2\u0116\u0117\7f\2\2\u0117X\3\2\2\2\u0118\u0119"+
		"\7v\2\2\u0119\u011a\7j\2\2\u011a\u011b\7g\2\2\u011b\u011c\7p\2\2\u011c"+
		"Z\3\2\2\2\u011d\u011e\7-\2\2\u011e\\\3\2\2\2\u011f\u0120\7/\2\2\u0120"+
		"^\3\2\2\2\u0121\u0125\t\2\2\2\u0122\u0124\t\3\2\2\u0123\u0122\3\2\2\2"+
		"\u0124\u0127\3\2\2\2\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2\2\u0126`\3"+
		"\2\2\2\u0127\u0125\3\2\2\2\u0128\u012a\t\4\2\2\u0129\u0128\3\2\2\2\u012a"+
		"\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012cb\3\2\2\2"+
		"\u012d\u012f\t\4\2\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e"+
		"\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u0130\3\2\2\2\u0133"+
		"\u0137\7\60\2\2\u0134\u0136\t\4\2\2\u0135\u0134\3\2\2\2\u0136\u0139\3"+
		"\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138d\3\2\2\2\u0139\u0137"+
		"\3\2\2\2\u013a\u013f\7$\2\2\u013b\u013e\5g\64\2\u013c\u013e\n\5\2\2\u013d"+
		"\u013b\3\2\2\2\u013d\u013c\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2"+
		"\2\2\u013f\u0140\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f\3\2\2\2\u0142"+
		"\u0143\7$\2\2\u0143f\3\2\2\2\u0144\u0145\7^\2\2\u0145\u0146\t\6\2\2\u0146"+
		"h\3\2\2\2\u0147\u0148\7\61\2\2\u0148\u0149\7\61\2\2\u0149\u014d\3\2\2"+
		"\2\u014a\u014c\n\7\2\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b"+
		"\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u014d\3\2\2\2\u0150"+
		"\u0151\b\65\2\2\u0151j\3\2\2\2\u0152\u0153\7\61\2\2\u0153\u0154\7,\2\2"+
		"\u0154\u015a\3\2\2\2\u0155\u0156\7,\2\2\u0156\u0159\n\b\2\2\u0157\u0159"+
		"\n\t\2\2\u0158\u0155\3\2\2\2\u0158\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a"+
		"\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015a\3\2"+
		"\2\2\u015d\u015e\7,\2\2\u015e\u015f\7\61\2\2\u015f\u0160\3\2\2\2\u0160"+
		"\u0161\b\66\2\2\u0161l\3\2\2\2\u0162\u0164\t\n\2\2\u0163\u0162\3\2\2\2"+
		"\u0164\u0165\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167"+
		"\3\2\2\2\u0167\u0168\b\67\2\2\u0168n\3\2\2\2\r\2\u0125\u012b\u0130\u0137"+
		"\u013d\u013f\u014d\u0158\u015a\u0165\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}