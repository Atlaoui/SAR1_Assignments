node once_from_to(X, A, B : bool) returns (ok : bool);
var scrutating,final : bool;
let
	scrutating = false -> (A or pre scrutating) and not B;
	final = false -> (scrutating and X) or pre final;
	ok = final and B;
tel



node switch (orig, on, off : bool) returns (state : bool);
let
  state = orig ->( if on then true else if off then false else  pre  state );
tel

node metronome (reset : bool; delay : int) returns (tic, tac : bool);
var hz, n : int; first, state : bool;

let

first =false ->  hz > 0;
hz = 0-> if reset or (pre hz > 0) then delay-n else pre hz;
n = 0 -> if (tic or tac) then pre n+1 else 0;
state = true -> if (pre state) then false  else true;
tic = false -> state and pre first;
tac = false ->  not state and pre first;

tel;

node tram(demande_porte ,porte_ouverte ,en_station ,attention_depart: bool) returns ( porte_ok,fermer_porte, ouvrir_porte, depart,
accepter_demande,porte_demandee,depart_imminent: bool);

------------------------------Variable------------------------------------------
--var  depart,accepter_demande,porte_demandee,depart_imminent :bool;
--------------------------------------------------------------------------------
var tic ,tac :bool;
let

 depart= false -> (not en_station) and (pre en_station);
 accepter_demande= false -> demande_porte and (depart or not attention_depart) and en_station;
 (tic, tac) = metronome(attention_depart,5);
 porte_demandee= demande_porte and accepter_demande;
 depart_imminent=tic or tac;

--------------------------------Sortie------------------------------------------
 fermer_porte= false-> depart_imminent and porte_ouverte and porte_demandee;
 ouvrir_porte=porte_demandee and en_station and not porte_ouverte;
 porte_ok= depart_imminent and if not porte_demandee and not porte_ouverte then true else porte_ouverte;


 --------------------------------Assert-----------------------------------------

 assert(ouvrir_porte and not en_station);

tel

node tramway(demande_porte ,porte_ouverte ,en_station ,attention_depart: bool)
                          returns ( porte_ok,fermer_porte, ouvrir_porte: bool);
var tic, tac ,On_en_station: bool;
let

On_en_station=switch(false,en_station,(not tic and not tac));
ouvrir_porte = porte_ouverte -> if en_station and demande_porte then true
                                                        else pre ouvrir_porte;
(tic, tac) = metronome(attention_depart,5);
fermer_porte = not tic and not tac;
porte_ok = demande_porte and On_en_station and (not porte_ouverte);

tel;














































node tram_tarik(demande_porte ,porte_ouverte ,en_station ,attention_depart: bool)
                      returns ( porte_ok,fermer_porte, ouvrir_porte ,signal_depart,accepter_demande,porte_demandee,depart_imminent: bool);
var tic, tac :bool;
let
 signal_depart=not en_station;
 (tic, tac) = metronome(attention_depart,5);
 depart_imminent = tic or tac;
 accepter_demande=en_station and not signal_depart and porte_ouverte;
 porte_demandee=switch (false,(demande_porte and accepter_demande),fermer_porte);

--------------------------------Sortie------------------------------------------
 ouvrir_porte=porte_demandee and en_station;
 porte_ok=not porte_demandee or not porte_ouverte;
 fermer_porte=depart_imminent and false->pre porte_demandee;



tel
